# networks:
#   dev:

# services:
#   nginx:
#     image: nginx:stable-alpine
#     ports:
#       - "80:80"
#     volumes:
#       - './nginx.conf:/etc/nginx/nginx.conf'
#     depends_on:
#       - backend
#       - frontend
#     networks:
#       - dev

#   backend:
#     build:
#       context: ./backend
#     networks:
#       - dev

#   frontend:
#     build:
#       context: ./frontend
#     networks:
#       - dev



version: '3.8'

services:
  # Сервис Бэкенда (Django)
  backend:
    build: ./backend
    container_name: django_backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn my_project.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - 8000
    env_file: # <-- ИЗМЕНЕНО
      - ./backend/.env
    depends_on:
      - db

  # Сервис Базы Данных (PostgreSQL)
  db:
    image: postgres:13
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backend/db_backup:/docker-entrypoint-initdb.d
    env_file: # <-- ИЗМЕНЕНО
      - ./backend/.env
    # Обратите внимание: сервис `db` теперь тоже использует `env_file` из папки `backend`,
    # так как все необходимые ему переменные (POSTGRES_...) находятся именно там.

  # Сервис Фронтенда (Nginx + React)
  frontend:
    build:
      context: ./frontend
      # Если вы используете переменные в React, их нужно передать при сборке
      args:
        - REACT_APP_WEBSITE_NAME=${REACT_APP_WEBSITE_NAME}
    container_name: nginx_frontend
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "80:80"
    env_file: # <-- ИЗМЕНЕНО (даже если файл пуст, это хорошая практика)
      - ./frontend/.env
    depends_on:
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume: